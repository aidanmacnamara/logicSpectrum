library("BiocInstaller", lib.loc="~/Documents/R/win-library/3.1")
biocLite()
library(CellNOptR)
library(CNORdt)
library(CNORode)
library(CNORfuzzy)
biocLite("CNORfuzzy")
biocLite("CNORdt")
data(modelPB, package="CNORdt")
data(CNOlistPB, package="CNORdt")
CNOlistPB
plotCNOlist(CNOlistPB)
model = preprocessing(CNOlistPB, modelPB)
plotModel(model)
t = 10
CNOlistSS = CNOlistPB
tIndex = which(CNOlistSS$timeSignals == t)
CNOlistSS$timeSignals = c(0,t)
CNOlistSS$valueSignals = list(t0=CNOlistPB$valueSignals[[1]],
CNOlistPB$valueSignals[[tIndex]])
opt1 <- gaBinaryT1(CNOlist=CNOlistSS, model=model,
verbose=FALSE, maxTime=60)
cutAndPlot(CNOlistSS, model, bStrings=list(opt1$bString))
warnings()
t = c(10,30)
CNOlistSS2 = CNOlistPB
tIndex = which(CNOlistSS2$timeSignals == t[1])
tIndex[2] = which(CNOlistSS2$timeSignals == t[2])
# make a new CNOlist with 2 time points
CNOlistSS2$timeSignals = c(0,t)
CNOlistSS2$valueSignals = list(t0=CNOlistPB$valueSignals[[1]],
CNOlistPB$valueSignals[[tIndex[1]]],
CNOlistPB$valueSignals[[tIndex[2]]])
opt2a <- gaBinaryT1(CNOlist=CNOlistSS2, model=model, maxTime=60, verbose=FALSE)
# optimise T2
opt2b <- gaBinaryT2(CNOlist=CNOlistSS2, bStringT1=opt2a$bString,
model=model, maxTime=60, verbose=FALSE)
cutAndPlot(CNOlistSS2, model, list(opt2a$bString, opt2b$bString))
optCFL = CNORwrapFuzzy(data=CNOlistSS, model=model)
require(CNORfuzzy)
optCFL = CNORwrapFuzzy(data=CNOlistSS, model=model)
# summarize results
summary = compileMultiRes(list(optCFL), show=TRUE)
# plot
plotMeanFuzzyFit(0.001, summary$allFinalMSEs, list(optCFL))
warnings()
require(CNORode)
initParams = createLBodeContPars(model, random=TRUE)
odeParams = parEstimationLBodeGA(CNOlistPB, model, initParams, iters=100)
# plot
plotLBodeFitness(CNOlistPB, model, odeParams)
m <- readSIF("data/true_model.sif")
plotModel(m)
load("data/true_params.RData")
true_params = paramsV3
save(true_params, "data/true_params.RData")
save(true_params, file="data/true_params.RData")
require(devtools)
load("data/true_params.RData")
install_github("cellnopt/CellNOptR/tree/master/packages/CNORode")
require(CNORode)
m <- readSIF("data/true_model.sif")
plotModel(m)
data(CNOlistPB, package="CNORdt")
sim <- getLBodeDataSim(CNOlistPB, m, true_params)
si
sim
true_params
true_params$parNames
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.05)
sim
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.01)
sim
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.1)
sim
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.001)
sim
CNOlist = CNOlistPB
CNOlist$valueSignals = sim
plot(CNOlist)
plotCNOlist(CNOlist)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.05)
CNOlist = CNOlistPB
CNOlist$valueSignals = sim
plotCNOlist(CNOlist)
sim <- getLBodeModelSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.05)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.05)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.05, reltol=1e-05)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.05, reltol=1e-02)
CNOlist = CNOlistPB
CNOlist$valueSignals = sim
plotCNOlist(CNOlist)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0.1, maxStepSize=0.05, reltol=1e-02)
CNOlist = CNOlistPB
CNOlist$valueSignals = sim
plotCNOlist(CNOlist)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0.5, maxStepSize=0.05, reltol=1e-02)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0.5, maxStepSize=0.05, reltol=1e-02)
CNOlist = CNOlistPB
CNOlist$valueSignals = sim
plotCNOlist(CNOlist)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.05, reltol=1e-02)
CNOlist = CNOlistPB
CNOlist$valueSignals = sim
plotCNOlist(CNOlist)
sim <- getLBodeDataSim(CNOlistPB, m, true_params, initial_state=0, maxStepSize=0.0001)
CNOlist = CNOlistPB
CNOlist$valueSignals = sim
plotCNOlist(CNOlist)
detach("package:CNORode", unload=TRUE)
install.packages("~/Downloads/CellNOptR-master/CellNOptR-master/packages/CNORode.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/CellNOptR-master/CellNOptR-master/packages/CNORode.zip", repos = NULL, type = "win.binary")
