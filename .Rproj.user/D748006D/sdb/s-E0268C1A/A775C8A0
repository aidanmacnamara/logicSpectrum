{
    "contents" : "\\documentclass{article}\n\n\\title{In Silico Systems Biology: Scripting with CellNOptR}\n\\author{Aidan MacNamara}\n\n\\begin{document}\n\\SweaveOpts{concordance=TRUE}\n\\maketitle\n\n\\tableofcontents\n\n\\section{Background}\n\nCellNOptR is a software package that trains the topology of a PSN to experimental data by the criterion of minimizing the error between the data and the logic model created from the PSN. In CellNOptR, the starting network based on prior knowledge is called the Prior Knowledge Network (PKN). This PKN is preprocessed before training by compression and expansion. The compression step of CellNOptR is a method of reducing the complexity of a logic model by removing nodes that have no effect on the outcome of simulation. The expansion step subsequently includes all possible hyperedges in the model. The model is trained by minimizing a bipartite function that calculates the mismatch between the logic model and experimental data (mean squared error) while penalizing model size. This minimization can be solved using different strategies, from simple enumeration of options for small cases, to stochastic optimization algorithms such as genetic algorithms.\n\nThe R version is available on Bioconductor and has a number of added features that allows the user to run different variations of logic modeling within the same framework of model calibration. These variations include steady state to discrete time Boolean modeling, fuzzy logic and logic ODEs, all of which will be discussed in turn below.\n\n<<Ropts, echo=FALSE>>=\noptions(width=50, message=FALSE, warning=FALSE)\n@\n\n\\section{Preprocessing}\n\nFirst off, load the necessary libraries, these can be downloaded from Bioconductor, using:\n\n<<bioconductor, eval=FALSE, results='hide'>>=\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"Package Name\")\n@\n\n<<loadLib, eval=TRUE, echo=TRUE, message=FALSE>>=\nlibrary(CellNOptR)\nlibrary(CNORdt)\nlibrary(CNORode)\nlibrary(CNORfuzzy)\n@\n\n\\noindent Then, create a directory where you can perform your analysis, then set it as your working directory.\n\n<<newDir, eval=FALSE>>=\ndir.create(\"CNOR_analysis\")\nsetwd(\"CNOR_analysis\")\n@\n\n\\noindent To illustrate the variety of logic modeling approaches, we will use an imaginary but biologically plausible prior knowledge network (PKN). This network includes a subset of intracellular signaling networks known to be activated downstream of EGF and TNF stimulation. This is loaded as `ModelPB':\n\n<<getModel, eval=TRUE>>=\ndata(modelPB, package=\"CNORdt\")\n@\n\n\\noindent The in silico data replicates biologically plausible behavior that has been seen in such networks, such as the transient behavior of ERK activation and the oscillatory dynamics of NF$\\kappa$B translocation from the cytoplasm to the nucleus. This is loaded as `CNOlistPB':\n\n<<getData, eval=TRUE>>=\ndata(CNOlistPB, package=\"CNORdt\")\n@\n\n\\noindent A CNOlist is the central data object of CellNOptR and the add-on packages below. It is the object that contains measurements of elements of a prior knowledge network under different combinations of perturbations of other nodes in the network. A CNOlist comprises the following fields: namesSignals, namesCues, namesStimuli and namesInhibitors, which are vectors holding the names of the measured, stimulated and inhibited species respectively. The fields valueCues (and its derivatives valueStimuli and valueInhibitors) are boolean matrices that contain for each condition (row) a 1 when the corresponding cue (column) is present, and a zero otherwise. You can have a look at your data and the CNOlist format by typing:\n\n<<showCNO, eval=TRUE, results='hide'>>=\nCNOlistPB\n@\n\n\\noindent The data can also be visualized using:\n\n<<plotCNO>>=\nplotCNOlist(CNOlistPB)\n@\n\n\\noindent The full details of preprocessing the model can be found in the \\emph{CellNOptR} package (the vignette gives a comprehensive explanation):\n\n<<SSVignette, eval=FALSE>>=\nbrowseVignettes(package=\"CellNOptR\")\n@\n\n<<preprocess>>=\nmodel = preprocessing(CNOlistPB, modelPB)\nplotModel(model)\n@\n\n\\section{Steady State}\n\nThis is essentially the same example as seen for CytoCopteR. With the \\emph{in silico} data as our starting point, the PKN is trained using the steady state model formalism at $t_1 = 10$ minutes.\n\n<<optimizeSS, eval=FALSE>>=\n# what time point is 'steady state' in the data?\nt = 10\nCNOlistSS = CNOlistPB\ntIndex = which(CNOlistSS$timeSignals == t)\n# make a new CNOlist with a single measurement time point\nCNOlistSS$timeSignals = c(0,t)\nCNOlistSS$valueSignals = list(t0=CNOlistPB$valueSignals[[1]],\nCNOlistPB$valueSignals[[tIndex]])\n\nopt1 <- gaBinaryT1(CNOlist=CNOlistSS, model=model,\nverbose=FALSE, maxTime=60)\n\ncutAndPlot(CNOlistSS, model, bStrings=list(opt1$bString))\n@\n\n\\section{Two time points (or additional steady state)}\n\nIt is quite common in signaling networks to observe a transient behavior where a species is quickly activated and subsequently deactivated. Such a dynamic obviously can not be captured with a steady state approach where only one time point is considered. Therefore in the above section, this issue was avoided by only modeling ``fast events'' i.e.~the activation phase of the signal propagation. However, when information about more than one time point is available and such a fast activation followed by slow deactivation (or indeed any combination of slower and faster processes) is observed, then it is possible to also capture these processes while keeping the simplifying assumption of steady states. In essence, it is assumed that multiple pseudo-steady states reflect the mechanisms that are acting at different time scales and they can be optimized independently. We will illustrate this with the CellNOptR implementation for two time scales, but the approach is extendable to more than two time points.\n\n<<optimize2SS, eval=FALSE>>=\nt = c(10,30)\nCNOlistSS2 = CNOlistPB\ntIndex = which(CNOlistSS2$timeSignals == t[1])\ntIndex[2] = which(CNOlistSS2$timeSignals == t[2])\n\n# make a new CNOlist with 2 time points\nCNOlistSS2$timeSignals = c(0,t)\nCNOlistSS2$valueSignals = list(t0=CNOlistPB$valueSignals[[1]],\n                               CNOlistPB$valueSignals[[tIndex[1]]],\n                               CNOlistPB$valueSignals[[tIndex[2]]])\n\nopt2a <- gaBinaryT1(CNOlist=CNOlistSS2, model=model, maxTime=60, verbose=FALSE)\n\n# optimise T2\nopt2b <- gaBinaryT2(CNOlist=CNOlistSS2, bStringT1=opt2a$bString,\n                    model=model, maxTime=60, verbose=FALSE)\n\ncutAndPlot(CNOlistSS2, model, list(opt2a$bString, opt2b$bString))\n@\n\n\\section{Synchronous multiple time point simulation with CNORdt}\n\nCNORdt introduces some variation in how time is handled in the model. Instead of simulating and fitting data at steady states, it is capable of fitting time course data by using an additional model parameter together with a synchronous updating scheme.\\\\\n\n\\noindent CNORdt introduces a scaling parameter that defines the time scale of the Boolean synchronous simulation. Where each ``tick'' ($t$) (or simulation step) is the synchronous updating of all nodes in the model according to their inputs at $t-1$, the scaling parameter defines the ``tick'' frequency relative to the time scale of the real data. Although this is a crude approach (i.e.~it implies a single rate across all reactions), it allows us to fit a synchronous Boolean simulation to data. Hence, all data points can be fitted to the model and hyperedges that cause feedback in the model can be included, which allows the model to reveal more complex dynamics such as oscillations.\\\\\n\n\\noindent More information can be found in the Bioconductor vignette:\n\n<<discreteTimeVignette, eval=FALSE>>=\nbrowseVignettes(package=\"CNORdt\")\n@\n\n\\noindent The following is an example using CNORdt:\n\n<<discreteTime, eval=FALSE>>=\nopt3 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, boolUpdates=30,\n                   maxTime=60, lowerB=0.8, upperB=10)\n\ncutAndPlotResultsDT(CNOlist=CNOlistPB, bString=opt3$bString, model=model,\n                    boolUpdates=30, lowerB=0.8, upperB=10)\n@\n\n\\section{Constrained fuzzy logic with CNORfuzzy}\n\nFuzzy logic is another logic modeling formalism that allows for intermediate levels of activation. Briefly, the relationships (or transfer functions) between nodes in CNORfuzzy are limited to Hill functions. Hence, each transfer function has 2 free parameters: the Hill coefficient $n$, which controls the steepness of the function, and the sensitivity parameter $k$, which determines the midpoint of the function (i.e.~the value of the input that produces half the maximal output). By varying these 2 parameters, linear, sigmoidal and step-like dynamics can be produced that are good approximations to protein-protein interactions and enzymatic reactions. Full details can be found by the searching for the vignette in R:\n\n<<cFLVignette, eval=FALSE>>=\nbrowseVignettes(package=\"CNORfuzzy\")\n@\n\n\\noindent The following wrapper function finds the optimized model:\n\n<<cFL, eval=FALSE>>=\n# run the wrapper first\noptCFL = CNORwrapFuzzy(data=CNOlistSS, model=model)\n\n# summarize results\nsummary = compileMultiRes(list(optCFL), show=TRUE)\n\n# plot\nplotMeanFuzzyFit(0.001, summary$allFinalMSEs, list(optCFL))\n@\n\n\\section{Logic ODEs with CNORode}\n\n\\noindent CNORode allows for continuous states and time by encoding the logic model as a set of ODEs. The transfer functions between nodes are Hill functions that allow for a wide variety of dynamics (to obtain a good fit to data, you may need to increase the number of optimization iterations: `iters'):\n\n<<ode, eval=FALSE>>=\ninitParams = createLBodeContPars(model, random=TRUE)\nodeParams = parEstimationLBodeGA(CNOlistPB, model, initParams, iters=100)\n\n# plot\nplotLBodeFitness(CNOlistPB, model, odeParams)\n@\n\n\\end{document}\n",
    "created" : 1439130813766.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1232598565",
    "id" : "A775C8A0",
    "lastKnownWriteTime" : 1439133073,
    "path" : "~/Documents/Rprojects/logicSpectrum/inst/extdata/tutorial.Rnw",
    "project_path" : "inst/extdata/tutorial.Rnw",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "sweave"
}