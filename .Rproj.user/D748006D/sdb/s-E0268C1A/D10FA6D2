{
    "contents" : "# issue 1\n# steady state boolean won't get rid of the self-loop\n# come back to\n# seems to work now\n\n# issue 2\n# the optimal is not being found for 2 steady state\n# what should the 2 steady state optimal look like?\n# the issue here is that 2 links need to be added: 'erk=ph' and '!ph+egf=sos'\n# and only 1 of these should be strong?\noptReal2a = c(0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0)\noptReal2b = c(0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)\noptRealComb = optReal2a\noptRealComb[optRealComb==0] = optReal2b\nplotModel(cutModel(model,optRealComb))\ncutAndPlot(CNOlistSS2, model, list(optReal2a, optReal2b))\n\n# try simulate\nsimT1 = simulateTN(CNOlistPB, model, list(optReal2a))\nsimT1[,indexFinder(CNOlistPB, cutModel(model,optReal2a))$signals]\nsimT2 = simulateTN(CNOlistPB, model, list(optReal2a,optReal2b))\nsimT2[,indexFinder(CNOlistPB, cutModel(model,optReal2b))$signals]\n\n# issue 3\n# discrete time version\n# discrepancy between scaling factor needed for nfkb oscillations and erk feedback?\nboolUpdates = 30\noptReal3 <- c(0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0)\nplotModel(cutModel(model,optReal3))\n\n# check sim\noptModel3 = cutModel(model,optReal3)\nsimList = prep4sim(optModel3)\nindexList = indexFinder(CNOlistPB, optModel3)\n\n# c version\nsimT0 = simulatorT0(CNOlist=CNOlistPB, model=optModel3, simList=simList, indexList=indexList)\nsimDT = simulatorDT(CNOlist=CNOlistPB, model=optModel3, simList=simList, indexList=indexList, boolUpdates=boolUpdates, prevSim=simT0)\nsimDT = convert2array(simDT, dim(CNOlistPB$valueSignals[[1]])[1], length(optModel3$namesSpecies), boolUpdates)\n\n# r version\nsimDT = simulatorDTr(CNOlist=CNOlistPB, model=optModel3, simList=simList, indexList=indexList, boolUpdates=boolUpdates)\nplotCNOlist(plotData(CNOlistPB, simDT[,indexList$signals,]))\n\n# does it match?\ncutAndPlotResultsDT(CNOlist=CNOlistPB, bString=optReal3, model=model,\n                    boolUpdates=boolUpdates, lowerB=0.8, upperB=10)\n\n# try with pause version\nload_all(\"~/Documents/workspace/svn2/sysbiomed/trunk/CNOR_dt/CNORdt\")\ndyn.load(\"~/Documents/workspace/svn2/sysbiomed/trunk/CNOR_dt/devel/simulatorDelay.so\")\ndelayThresh = sample(1:10,length(optModel3$reacID),replace=TRUE)\nnegEdges = delayThresh\nsimP = simulatorDelay(CNOlistPB, optModel3, simList, indexList, boolUpdates=boolUpdates, delayThresh=delayThresh, strongWeak=negEdges, prevSim=simT0)\nsimP = convert2array(simP, 10, 13, boolUpdates)\nplotCNOlist(plotData(CNOlistPB, simP[,indexList$signals,]))\nfitDelay = getFitDelay(CNOlistPB, optModel3, simList, indexList, boolUpdates=boolUpdates, nInTot=length(which(model$interMat==-1)))\nscore = computeScoreDelay(CNOlistPB, model, optReal3, boolUpdates=boolUpdates)\nres = gaBinaryDelay(CNOlistPB, model, boolUpdates=boolUpdates)\n\n# above is crashing, is it the self-loop?\noptReal3 <- c(0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0)\ndata(\"modelPB\")\nmodel = preprocessing(CNOlistPB, modelPB)\noptModelPause = cutModel(model, c(1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0))\nsimList = prep4sim(optModelPause)\nindexList = indexFinder(CNOlistPB, optModelPause)\n\ncomputeScoreDT(CNOlistPB, model, bString=wantBstring, boolUpdates=30, lowerB=0.8, upperB=10)\ncutAndPlotResultsDT(model=model, CNOlist=CNOlistPB, bString=wantBstring, plotPDF=FALSE, boolUpdates=30, lowerB=0.8, upperB=10)\n\n\n# FUNCTIONS ---------------------------------------------------------------\n\nplotData <- function(CNOlist, data) {\n  \n  valueSignals = list()\n  outSim = data\n  if(is.list(outSim)) {\n    valueSignals = outSim\n    t = length(outSim)\n  } else {   \n    for(a in 1:dim(outSim)[3]) {\n      valueSignals = c(valueSignals, list(outSim[,,a]))\n    }\n    t = dim(outSim)[3]\n  }   \n  CNOlistSim = CNOlist\n  CNOlistSim$valueSignals = valueSignals\n  CNOlistSim$timeSignals = 0:(t-1)\n  \n  return(CNOlistSim)   \n}\n",
    "created" : 1439190025136.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3895298557",
    "id" : "D10FA6D2",
    "lastKnownWriteTime" : 1398253718,
    "path" : "E:/macnamara/Documents/Presentations/cellnoptrTutorialSelfLoop/tutorialTroubleShoot.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}